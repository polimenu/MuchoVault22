{
	"language": "Solidity",
	"settings": {
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"viaIR": true,
		"outputSelection": {
			"*": {
				"": [
					"ast"
				],
				"*": [
					"abi",
					"metadata",
					"devdoc",
					"userdoc",
					"storageLayout",
					"evm.legacyAssembly",
					"evm.bytecode",
					"evm.deployedBytecode",
					"evm.methodIdentifiers",
					"evm.gasEstimates",
					"evm.assembly"
				]
			}
		}
	},
	"sources": {
		"contracts/MuchoVault.sol": {
			"content": "/*                               %@@@@@@@@@@@@@@@@@(                              \n                        ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                        \n                    /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                   \n                 &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(                \n              ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              \n            *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@            \n           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          \n         &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*        \n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&       \n       @@@@@@@@@@@@@   #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   &@@@@@@@@@@@      \n      &@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.   @@@@@@@@@@,     \n      @@@@@@@@@@&   .@@@@@@@@@@@@@@@@@&@@@@@@@@@&&@@@@@@@@@@@#   /@@@@@@@@@     \n     &@@@@@@@@@@    @@@@@&                 %          @@@@@@@@,   #@@@@@@@@,    \n     @@@@@@@@@@    @@@@@@@@%       &&        *@,       @@@@@@@@    @@@@@@@@%    \n     @@@@@@@@@@    @@@@@@@@%      @@@@      /@@@.      @@@@@@@@    @@@@@@@@&    \n     @@@@@@@@@@    &@@@@@@@%      @@@@      /@@@.      @@@@@@@@    @@@@@@@@/    \n     .@@@@@@@@@@    @@@@@@@%      @@@@      /@@@.      @@@@@@@    &@@@@@@@@     \n      @@@@@@@@@@@    @@@@&         @@        .@          @@@@.   @@@@@@@@@&     \n       @@@@@@@@@@@.   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@      \n        @@@@@@@@@@@@.  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@       \n         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        \n          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#         \n            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           \n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             \n                &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/               \n                   &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(                  \n                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#                      \n                            /@@@@@@@@@@@@@@@@@@@@@@@*  */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IMuchoVault.sol\";\nimport \"../interfaces/IMuchoHub.sol\";\nimport \"../interfaces/IMuchoBadgeManager.sol\";\nimport \"../interfaces/IMuchoRewardRouter.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"./MuchoRoles.sol\";\nimport \"../lib/UintSafe.sol\";\n\ncontract MuchoVault is IMuchoVault, MuchoRoles, ReentrancyGuard{\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using SafeMath for uint8;\n    using UintSafe for uint256;\n\n    VaultInfo[] private vaultInfo;\n\n    /*-------------------------TYPES---------------------------------------------*/\n    // Same (special fee) for MuchoBadge NFT holders:\n    struct MuchoBadgeSpecialFee{  \n        uint256 fee;  \n        bool exists; \n    }\n\n    /*--------------------------CONTRACTS---------------------------------------*/\n\n    //HUB for handling investment in the different protocols:\n    IMuchoHub public muchoHub = IMuchoHub(address(0));\n    function setMuchoHub(address _contract) external onlyAdmin{ \n        muchoHub = IMuchoHub(_contract);\n        emit MuchoHubChanged(_contract); \n    }\n\n    //Price feed to calculate USD values:\n    IPriceFeed public priceFeed = IPriceFeed(0x846ecf0462981CC0f2674f14be6Da2056Fc16bDA);\n    function setPriceFeed(address _contract) external onlyAdmin{ \n        priceFeed = IPriceFeed(_contract);\n        emit PriceFeedChanged(_contract); \n    }\n\n    //Badge Manager to get NFT holder attributes:\n    IMuchoBadgeManager public badgeManager = IMuchoBadgeManager(0xC439d29ee3C7fa237da928AD3A3D6aEcA9aA0717);\n    function setBadgeManager(address _contract) external onlyAdmin { \n        badgeManager = IMuchoBadgeManager(_contract);\n        emit BadgeManagerChanged(_contract);\n    }\n\n    //Reward router to add users:\n    IMuchoRewardRouter public muchoRewardRouter = IMuchoRewardRouter(0xC439d29ee3C7fa237da928AD3A3D6aEcA9aA0717);\n    function setMuchoRewardRouter(address _contract) external onlyAdmin { \n        muchoRewardRouter = IMuchoRewardRouter(_contract);\n        emit MuchoRewardRouterChanged(_contract);\n    }\n\n    //Address where we send profits from fees:\n    address public earningsAddress = 0x829C145cE54A7f8c9302CD728310fdD6950B3e16;\n    function setEarningsAddress(address _addr) external onlyAdmin{ \n        earningsAddress = _addr; \n        emit EarningsAddressChanged(_addr);\n    }\n\n\n    /*--------------------------PARAMETERS--------------------------------------*/\n\n    //Maximum amount a user with NFT Plan can invest\n    mapping(uint256 => mapping(uint256 => uint256)) maxDepositUserPlan;\n    function setMaxDepositUserForPlan(uint256 _vaultId, uint256 _planId, uint256 _amount) external onlyTraderOrAdmin{\n        maxDepositUserPlan[_vaultId][_planId] = _amount;\n    }\n    function getMaxDepositUserForPlan(uint256 _vaultId, uint256 _planId) external view returns(uint256){\n        return maxDepositUserPlan[_vaultId][_planId];\n    }\n\n    /*---------------------------------MODIFIERS and CHECKERS---------------------------------*/\n    //Validates a vault ID\n    modifier validVault(uint _id){\n        require(_id < vaultInfo.length, \"MuchoVaultV2.validVault: not valid vault id\");\n        _;\n    }\n\n    //Checks if there is a vault for the specified token\n    function checkDuplicate(IERC20 _depositToken, IMuchoToken _muchoToken) internal view returns(bool) {\n        for (uint256 i = 0; i < vaultInfo.length; ++i){\n            if (vaultInfo[i].depositToken == _depositToken || vaultInfo[i].muchoToken == _muchoToken){\n                return false;\n            }        \n        }\n        return true;\n    }\n\n    /*----------------------------------VAULTS SETUP FUNCTIONS-----------------------------------------*/\n\n    //Adds a vault:\n    function addVault(IERC20Metadata _depositToken, IMuchoToken _muchoToken) external onlyAdmin returns(uint8){\n        require(checkDuplicate(_depositToken, _muchoToken), \"MuchoVaultV2.addVault: vault for that deposit or mucho token already exists\");\n        require(_depositToken.decimals() == _muchoToken.decimals(), \"MuchoVaultV2.addVault: deposit and mucho token decimals cannot differ\");\n\n        vaultInfo.push(VaultInfo({\n            depositToken: _depositToken,\n            muchoToken: _muchoToken,\n            lastUpdate: block.timestamp, \n            stakable: true,\n            withdrawable: true,\n            depositFee: 0,\n            withdrawFee: 0,\n            maxDepositUser: 10**30,\n            maxCap: 0\n        }));\n\n        emit VaultAdded(_depositToken, _muchoToken);\n\n        return uint8(vaultInfo.length.sub(1));\n    }\n\n    //Sets maximum amount to deposit:\n    function setMaxCap(uint8 _vaultId, uint256 _max) external onlyTraderOrAdmin validVault(_vaultId){\n        vaultInfo[_vaultId].maxCap = _max;\n    }\n\n    //Sets maximum amount to deposit for a user:\n    function setMaxDepositUser(uint8 _vaultId, uint256 _max) external onlyTraderOrAdmin validVault(_vaultId){\n        vaultInfo[_vaultId].maxDepositUser = _max;\n    }\n\n    //Sets a deposit fee for a vault:\n    function setDepositFee(uint8 _vaultId, uint16 _fee) external onlyTraderOrAdmin validVault(_vaultId){\n        require(_fee < 500, \"MuchoVault: Max deposit fee exceeded\");\n        vaultInfo[_vaultId].depositFee = _fee;\n        emit DepositFeeChanged(_vaultId, _fee);\n    }\n\n    //Sets a withdraw fee for a vault:\n    function setWithdrawFee(uint8 _vaultId, uint16 _fee) external onlyTraderOrAdmin validVault(_vaultId){\n        require(_fee < 100, \"MuchoVault: Max withdraw fee exceeded\");\n        vaultInfo[_vaultId].withdrawFee = _fee;\n        emit WithdrawFeeChanged(_vaultId, _fee);\n    }\n\n    //Opens or closes a vault for deposits:\n    function setOpenVault(uint8 _vaultId, bool open) public onlyTraderOrAdmin validVault(_vaultId) {\n        vaultInfo[_vaultId].stakable = open;\n        if(open)\n            emit VaultOpen(_vaultId);\n        else\n            emit VaultClose(_vaultId);\n    }\n\n    //Opens or closes ALL vaults for deposits:\n    function setOpenAllVault(bool open) external onlyTraderOrAdmin {\n        for (uint8 _vaultId = 0; _vaultId < vaultInfo.length; ++ _vaultId){\n            setOpenVault(_vaultId, open);\n        }\n    }\n\n    //Opens or closes a vault for deposits:\n    function setWithdrawableVault(uint8 _vaultId, bool open) public onlyTraderOrAdmin validVault(_vaultId) {\n        vaultInfo[_vaultId].withdrawable = open;\n        if(open)\n            emit VaultWithdrawOpen(_vaultId);\n        else\n            emit VaultWithdrawClose(_vaultId);\n    }\n\n    //Opens or closes ALL vaults for deposits:\n    function setWithdrawableAllVault(bool open) external onlyTraderOrAdmin {\n        for (uint8 _vaultId = 0; _vaultId < vaultInfo.length; ++ _vaultId){\n            setWithdrawableVault(_vaultId, open);\n        }\n    }\n\n    // Refresh Investment and update all vaults:\n    function refreshAndUpdateAllVaults() external onlyTraderOrAdmin {\n        muchoHub.refreshAllInvestments();\n    }\n\n    /*----------------------------CORE: User deposit and withdraw------------------------------*/\n    \n    //Deposits an amount in a vault\n    function deposit(uint8 _vaultId, uint256 _amount) external validVault(_vaultId) nonReentrant {\n        IMuchoToken mToken = vaultInfo[_vaultId].muchoToken;\n        IERC20 dToken = vaultInfo[_vaultId].depositToken;\n\n\n        /*console.log(\"    SOL - DEPOSITING\");\n        console.log(\"    SOL - Sender and balance\", msg.sender, dToken.balanceOf(msg.sender));\n        console.log(\"    SOL - amount\", _amount);*/\n        \n        require(_amount != 0, \"MuchoVaultV2.deposit: Insufficent amount\");\n        require(msg.sender != address(0), \"MuchoVaultV2.deposit: address is not valid\");\n        require(_amount <= dToken.balanceOf(msg.sender), \"MuchoVaultV2.deposit: balance too low\" );\n        require(vaultInfo[_vaultId].stakable, \"MuchoVaultV2.deposit: not stakable\");\n        require(vaultInfo[_vaultId].maxCap == 0 || vaultInfo[_vaultId].maxCap >= _amount.add(vaultTotalStaked(_vaultId)), \"MuchoVaultV2.deposit: depositing more than max allowed in total\");\n        uint256 wantedDeposit = _amount.add(investorVaultTotalStaked(_vaultId, msg.sender));\n        require(wantedDeposit <= investorMaxAllowedDeposit(_vaultId, msg.sender), \"MuchoVaultV2.deposit: depositing more than max allowed per user\");\n     \n        // Gets the amount of deposit token locked in the contract\n        uint256 totalStakedTokens = vaultTotalStaked(_vaultId);\n\n        // Gets the amount of muchoToken in existence\n        uint256 totalShares = mToken.totalSupply();\n\n        // Remove the deposit fee and calc amount after fee\n        uint256 ownerDepositFee = _amount.mul(vaultInfo[_vaultId].depositFee).div(10000);\n        uint256 amountAfterOwnerFee = _amount.sub(ownerDepositFee);\n        uint256 amountAfterAllFees = _amount.sub(getDepositFee(_vaultId, _amount));\n\n        /*console.log(\"    SOL - depositFee\", vaultInfo[_vaultId].depositFee);\n        console.log(\"    SOL - ownerDepositFee\", ownerDepositFee);\n        console.log(\"    SOL - amountAfterFee\", amountAfterFee);*/\n\n        // If no muchoToken exists, mint it 1:1 to the amount put in\n        if (totalShares == 0 || totalStakedTokens == 0) {\n            mToken.mint(msg.sender, amountAfterAllFees);\n        } \n        // Calculate and mint the amount of muchoToken the depositToken is worth. The ratio will change overtime with APR\n        else {\n            uint256 what = amountAfterAllFees.mul(totalShares).div(totalStakedTokens);\n            mToken.mint(msg.sender, what);\n        }\n\n        //console.log(\"    SOL - TOTAL STAKED AFTER DEP 0\", vaultInfo[_vaultId].totalStaked);\n        //console.log(\"    SOL - EXECUTING DEPOSIT FROM IN HUB\");\n        muchoHub.depositFrom(msg.sender, address(dToken), amountAfterOwnerFee, ownerDepositFee, earningsAddress);\n        //console.log(\"    SOL - TOTAL STAKED AFTER DEP 1\", vaultInfo[_vaultId].totalStaked);\n        //console.log(\"    SOL - EXECUTING UPDATE VAULT\");\n        //console.log(\"    SOL - TOTAL STAKED AFTER DEP 2\", vaultInfo[_vaultId].totalStaked);\n\n        //add user to get rewards if eventually adquires the nft\n        (uint multiplierNft,) = muchoRewardRouter.getUserMultiplierAndPlan(msg.sender);\n        if(multiplierNft > 0)\n            muchoRewardRouter.addUserIfNotExists(msg.sender); \n\n        emit Deposited(msg.sender, _vaultId, _amount, vaultTotalStaked(_vaultId));\n    }\n\n    //Withdraws from a vault. The user should have muschoTokens that will be burnt\n    function withdraw(uint8 _vaultId, uint256 _share) external validVault(_vaultId) nonReentrant {\n        //console.log(\"    SOL - WITHDRAW!!!\");\n        require(vaultInfo[_vaultId].withdrawable, \"MuchoVault: not withdrawable\");\n\n        IMuchoToken mToken = vaultInfo[_vaultId].muchoToken;\n        IERC20 dToken = vaultInfo[_vaultId].depositToken;\n\n        require(_share != 0, \"MuchoVaultV2.withdraw: Insufficient amount\");\n        require(msg.sender != address(0), \"MuchoVaultV2.withdraw: address is not valid\");\n        require(_share <= mToken.balanceOf(msg.sender), \"MuchoVaultV2.withdraw: balance too low\");\n\n        // Calculates the amount of depositToken the muchoToken is worth\n        uint256 amountOut = _share.mul(vaultTotalStaked(_vaultId)).div(mToken.totalSupply());\n\n        mToken.burn(msg.sender, _share);\n\n        // Calculates withdraw fee:\n        uint256 ownerWithdrawFee = amountOut.mul(vaultInfo[_vaultId].withdrawFee).div(10000);\n        amountOut = amountOut.sub(ownerWithdrawFee);\n\n        //console.log(\"    SOL - amountOut, ownerFee\", amountOut, ownerWithdrawFee);\n\n        muchoHub.withdrawFrom(msg.sender, address(dToken), amountOut, ownerWithdrawFee, earningsAddress);\n\n\n        emit Withdrawn(msg.sender, _vaultId, amountOut, _share, vaultTotalStaked(_vaultId));\n    }\n\n\n    /*---------------------------------INFO VIEWS---------------------------------------*/\n\n    //Gets the deposit fee amount, adding owner's deposit fee (in this contract) + protocol's one\n    function getDepositFee(uint8 _vaultId, uint256 _amount) public view returns(uint256){\n        uint256 fee = _amount.mul(vaultInfo[_vaultId].depositFee).div(10000);\n        return fee.add(muchoHub.getDepositFee(address(vaultInfo[_vaultId].depositToken), _amount.sub(fee)));\n    }\n\n    //Gets the withdraw fee amount, adding owner's withdraw fee (in this contract) + protocol's one\n    function getWithdrawalFee(uint8 _vaultId, uint256 _amount) external view returns(uint256){\n        uint256 fee = muchoHub.getWithdrawalFee(address(vaultInfo[_vaultId].depositToken), _amount);\n        return fee.add(_amount.sub(fee).mul(vaultInfo[_vaultId].withdrawFee).div(10000));\n    }\n\n    //Gets the expected APR if we add an amount of token\n    function getExpectedAPR(uint8 _vaultId, uint256 _additionalAmount) external view returns(uint256){\n        return muchoHub.getExpectedAPR(address(vaultInfo[_vaultId].depositToken), _additionalAmount);\n    }\n\n    //Displays total amount of staked tokens in a vault:\n    function vaultTotalStaked(uint8 _vaultId) validVault(_vaultId) public view returns(uint256) {\n        return muchoHub.getTotalStaked(address(vaultInfo[_vaultId].depositToken));\n    }\n    \n\n    //Displays total amount a user has staked in a vault:\n    function investorVaultTotalStaked(uint8 _vaultId, address _address) validVault(_vaultId) public view returns(uint256) {\n        require(_address != address(0), \"MuchoVaultV2.displayStakedBalance: No valid address\");\n        IMuchoToken mToken = vaultInfo[_vaultId].muchoToken;\n        uint256 totalShares = mToken.totalSupply();\n        if(totalShares == 0) return 0;\n        uint256 amountOut = mToken.balanceOf(_address).mul(vaultTotalStaked(_vaultId)).div(totalShares);\n        return amountOut;\n    }\n\n    //Maximum amount of token allowed to deposit for user:\n    function investorMaxAllowedDeposit(uint8 _vaultId, address _user) validVault(_vaultId) public view returns(uint256){\n        uint256 maxAllowed = vaultInfo[_vaultId].maxDepositUser;\n        IMuchoBadgeManager.Plan[] memory plans = badgeManager.activePlansForUser(_user);\n        for(uint i = 0; i < plans.length; i = i.add(1)){\n            uint256 id = plans[i].id;\n            if(maxDepositUserPlan[_vaultId][id] > maxAllowed)\n                maxAllowed = maxDepositUserPlan[_vaultId][id];\n        }\n\n        return maxAllowed;\n    }\n\n    //Price Muchotoken vs \"real\" token:\n    function muchoTokenToDepositTokenPrice(uint8 _vaultId) validVault(_vaultId) external view returns(uint256) {\n        IMuchoToken mToken = vaultInfo[_vaultId].muchoToken;\n        uint256 totalShares = mToken.totalSupply();\n        uint256 amountOut = vaultTotalStaked(_vaultId).mul(10**18).div(totalShares);\n        return amountOut;\n    }\n\n    //Total USD in a vault (18 decimals):\n    function vaultTotalUSD(uint8 _vaultId) validVault(_vaultId) public view returns(uint256) {\n         return getUSD(vaultInfo[_vaultId].depositToken, vaultTotalStaked(_vaultId));\n    }\n\n    //Total USD an investor has in a vault:\n    function investorVaultTotalUSD(uint8 _vaultId, address _user) validVault(_vaultId) public view returns(uint256) {\n        require(_user != address(0), \"MuchoVaultV2.totalUserVaultUSD: Invalid address\");\n        IMuchoToken mToken = vaultInfo[_vaultId].muchoToken;\n        uint256 mTokenUser = mToken.balanceOf(_user);\n        uint256 mTokenTotal = mToken.totalSupply();\n\n        if(mTokenUser == 0 || mTokenTotal == 0)\n            return 0;\n\n        return getUSD(vaultInfo[_vaultId].depositToken, vaultTotalStaked(_vaultId).mul(mTokenUser).div(mTokenTotal));\n    }\n\n    //Total USD an investor has in all vaults:\n    function investorTotalUSD(address _user) public view returns(uint256){\n        require(_user != address(0), \"MuchoVaultV2.totalUserUSD: Invalid address\");\n        uint256 total = 0;\n         for (uint8 i = 0; i < vaultInfo.length; ++i){\n            total = total.add(investorVaultTotalUSD(i, _user));\n         }\n\n         return total;\n    }\n\n    //Protocol TVL in USD:\n    function allVaultsTotalUSD() public view returns(uint256) {\n         uint256 total = 0;\n         for (uint8 i = 0; i < vaultInfo.length; ++i){\n            total = total.add(vaultTotalUSD(i));\n         }\n\n         return total;\n    }\n\n    //Gets a vault descriptive:\n    function getVaultInfo(uint8 _vaultId) external view validVault(_vaultId) returns(VaultInfo memory){\n        return vaultInfo[_vaultId];\n    }\n    \n    //gets usd amount with 18 decimals for a erc20 token and amount\n    function getUSD(IERC20Metadata _token, uint256 _amount) internal view returns(uint256){\n        uint256 tokenPrice = priceFeed.getPrice(address(_token));\n        uint256 totalUSD = tokenPrice.mul(_amount).div(10**30); //as price feed uses 30 decimals\n        uint256 decimals = _token.decimals();\n        if(decimals > 18){\n            totalUSD = totalUSD.div(10 ** (decimals - 18));\n        }\n        else if(decimals < 18){\n            totalUSD = totalUSD.mul(10 ** (18 - decimals));\n        }\n\n        return totalUSD;\n    }\n\n}"
		},
		"lib/UintSafe.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary UintSafe{\n    uint16 constant MAX_UINT16 = 65535;\n    uint32 constant MAX_UINT32 = 4294967295;\n\n    function CastTo16(uint256 _in) public pure returns(uint16){\n        if(_in > MAX_UINT16)\n            return MAX_UINT16;\n        \n        return uint16(_in);\n    }\n\n    function CastTo32(uint256 _in) public pure returns(uint32){\n        if(_in > MAX_UINT32)\n            return MAX_UINT32;\n        \n        return uint32(_in);\n    }\n}"
		},
		"contracts/MuchoRoles.sol": {
			"content": "/*                               %@@@@@@@@@@@@@@@@@(                              \n                        ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                        \n                    /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                   \n                 &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(                \n              ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              \n            *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@            \n           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          \n         &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*        \n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&       \n       @@@@@@@@@@@@@   #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   &@@@@@@@@@@@      \n      &@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.   @@@@@@@@@@,     \n      @@@@@@@@@@&   .@@@@@@@@@@@@@@@@@&@@@@@@@@@&&@@@@@@@@@@@#   /@@@@@@@@@     \n     &@@@@@@@@@@    @@@@@&                 %          @@@@@@@@,   #@@@@@@@@,    \n     @@@@@@@@@@    @@@@@@@@%       &&        *@,       @@@@@@@@    @@@@@@@@%    \n     @@@@@@@@@@    @@@@@@@@%      @@@@      /@@@.      @@@@@@@@    @@@@@@@@&    \n     @@@@@@@@@@    &@@@@@@@%      @@@@      /@@@.      @@@@@@@@    @@@@@@@@/    \n     .@@@@@@@@@@    @@@@@@@%      @@@@      /@@@.      @@@@@@@    &@@@@@@@@     \n      @@@@@@@@@@@    @@@@&         @@        .@          @@@@.   @@@@@@@@@&     \n       @@@@@@@@@@@.   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@      \n        @@@@@@@@@@@@.  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@       \n         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        \n          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#         \n            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           \n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             \n                &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/               \n                   &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(                  \n                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#                      \n                            /@@@@@@@@@@@@@@@@@@@@@@@*  */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nabstract contract MuchoRoles is AccessControl{\n    bytes32 public constant CONTRACT_OWNER = keccak256(\"CONTRACT_OWNER\");\n    bytes32 public constant TRADER = keccak256(\"TRADER\");\n\n    constructor(){\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        //_setRoleAdmin(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    modifier onlyAdmin(){\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"MuchoRoles: Only for admin\");\n        _;\n    }\n\n    modifier onlyContractOwner(){\n        require(hasRole(CONTRACT_OWNER, msg.sender), \"MuchoRoles: Only for contract owner\");\n        _;\n    }\n\n    modifier onlyContractOwnerOrAdmin(){\n        require(hasRole(CONTRACT_OWNER, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"MuchoRoles: Only for contract owner or admin\");\n        _;\n    }\n\n    modifier onlyTraderOrAdmin(){\n        require(hasRole(TRADER, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"MuchoRoles: Only for trader or admin\");\n        _;\n    }\n\n    modifier onlyOwnerTraderOrAdmin(){\n        require(hasRole(TRADER, msg.sender) || hasRole(CONTRACT_OWNER, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"MuchoRoles: Only for owner, trader or admin\");\n        _;\n    }\n\n\n    modifier onlyOwner(){\n        require(hasRole(CONTRACT_OWNER, msg.sender), \"MuchoRoles: Only for owner\");\n        _;\n    }\n\n}\n"
		},
		"interfaces/IPriceFeed.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IPriceFeed{\n    function getPrice(address _token) external view returns(uint256);\n}"
		},
		"interfaces/IMuchoRewardRouter.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n/*\r\nMuchoRewardRouter\r\n\r\nContrato que manejan los rewards de los NFT holders\r\nGuarda liquidez. Un upgrade sería complicado (requeriría una v2 y podría quedar liquidez “muerta” en la v1)\r\nOwner: MuchoHUB\r\n\r\nOperaciones de depósito de rewards (público): \r\n    depositRewards\r\n    withdraw\r\nOperaciones de gestión de usuarios invertidos (owner=MuchoHUB): \r\n    addUser, removeUser\r\nOperaciones de configuración ó upgrade (protocolOwner): \r\n    añadir/modificar NFTs suscritos y su multiplicador de APR\r\n    cambiar direcciones de los contratos a los que se conecta\r\n\r\n*/\r\n\r\ninterface IMuchoRewardRouter{\r\n    event UserAdded(address user);\r\n    event UserRemoved(address user);\r\n    event PlanAdded(uint256 planId, uint multiplier);\r\n    event PlanRemoved(uint256 planId);\r\n    event MultiplierChanged(uint256 planId, uint multiplier);\r\n    event RewardsDeposited(address token, uint256 amount);\r\n    event RewardsNotDeposited(address token, uint256 amount);\r\n    event RewardsUserEarned(address token, address user, uint256 amount);\r\n    event Withdrawn(address token, uint256 amount);\r\n    \r\n    //Checks if a user exists and adds it to the list\r\n    function addUserIfNotExists(address _user) external;\r\n    \r\n    //Removes a user if exists in the lust\r\n    function removeUserIfExists(address _user) external;\r\n    \r\n    //Adds a plan with benefits\r\n    function addPlanId(uint256 _planId, uint _multiplier) external;\r\n    \r\n    //Removes a plan benefits\r\n    function removePlanId(uint256 _planId) external;\r\n\r\n    //Changes the multiplier for a plan\r\n    function setMultiplier(uint256 _planId, uint _multiplier) external;\r\n    \r\n    //Deposit the rewards and split among the users\r\n    function depositRewards(address _token, uint256 _amount) external;\r\n\r\n    //Withdraws all the rewards the user has\r\n    function withdrawToken(address _token) external returns(uint256);\r\n\r\n    //Withdraws all the rewards the user has\r\n    function withdraw() external;\r\n\r\n    //For a plan, gets the current amount ponderation (basis points) for a new deposit. This will be needed to calculate estimated APR that plan's users are getting in avg\r\n    function getPlanPonderation(uint256 _planId) external view returns(uint256);\r\n\r\n    function getUserMultiplierAndPlan(address _user) external view returns(uint, uint256);\r\n}"
		},
		"interfaces/IMuchoBadgeManager.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IMuchoBadgeManager {\n    struct Plan {\n        uint256 id;\n        string name;\n        string uri;\n        uint256 subscribers;\n        Price subscriptionPrice;\n        Price renewalPrice;\n        uint256 time;\n        bool exists;\n        bool enabled;\n    }\n\n    struct Price {\n        address token;\n        uint256 amount;\n    }\n\n    function activePlansForUser(address _user) external view returns (Plan[] memory);\n\n}\n"
		},
		"interfaces/IMuchoHub.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport \"../lib/InvestmentPartition.sol\";\r\n\r\n/*\r\nCONTRATO MuchoHub:\r\n\r\nHUB de conexión con las inversiones en distintos protocolos\r\nNo guarda liquidez. Potencialmente upgradeable\r\nGuarda una una lista de contratos MuchoInvestment, cada uno de los cuales mantiene la inversión en un protocolo diferente\r\nEn caso de upgrade deberíamos crear estructura gemela en el nuevo contrato\r\nEs el owner de los contratos MuchoInvestment, lo que le permite mover su liquidez\r\nEn caso de upgrade tendría que transferir ese ownership\r\nOwner: contrato MuchoVault\r\n\r\nOperaciones de inversión (owner=MuchoVault): deposit, withdraw\r\nOperaciones de configuración (protocolOwner): añadir, modificar o desactivar contratos MuchoInvestment (protocolos)\r\nOperaciones de trading (trader o protocolOwner): \r\n        moveInvestment: mover liquidez de un MuchoInvestment a otro\r\n        setDefaultInvestment: determinar los MuchoInvestment por defecto y su porcentaje, para cada token al agregar nueva liquidez un inversor (si no se especifica, irá al 0)\r\n        refreshAllInvestments: llamará a updateInvestment de cada MuchoInvestment (ver siguiente slide)\r\n\r\nOperaciones de upgrade (protocolOwner): cambiar direcciones de los contratos a los que se conecta\r\n\r\nVistas (públicas): getApr\r\n*/\r\n\r\ninterface IMuchoHub{\r\n    event Deposited(address investor, address token, uint256 amount, uint256 totalStakedAfter);\r\n    event Withdrawn(address investor, address token, uint256 amount, uint256 totalStakedAfter);\r\n    event ProtocolAdded(address protocol);\r\n    event ProtocolRemoved(address protocol);\r\n    event InvestmentMoved(address token, uint256 amount, address protocolSource, address protocolDestination);\r\n    event DefaultInvestmentChanged(address token, InvestmentPart[] partitionListAfter);\r\n    event InvestmentRefreshed(address protocol, address token, uint256 oldAmount, uint256 newAmount);\r\n\r\n    function depositFrom(address _investor, address _token, uint256 _amount, uint256 _amountOwnerFee, address _feeDestination) external;\r\n    function withdrawFrom(address _investor, address _token, uint256 _amount, uint256 _amountOwnerFee, address _feeDestination) external;\r\n\r\n    function addProtocol(address _contract) external;\r\n    function removeProtocol(address _contract) external;\r\n\r\n    function moveInvestment(address _token, uint256 _amount, address _protocolSource, address _protocolDestination) external;\r\n    function setDefaultInvestment(address _token, InvestmentPart[] calldata _partitionList) external;\r\n\r\n    function refreshInvestment(address _protocol) external;\r\n    function refreshAllInvestments() external;\r\n\r\n    function getDepositFee(address _token, uint256 _amount) external view returns(uint256);\r\n    function getWithdrawalFee(address _token, uint256 _amount) external view returns(uint256);\r\n    function getTotalNotInvested(address _token) external view returns(uint256);\r\n    function getTotalStaked(address _token) external view returns(uint256);\r\n    function getTotalUSD() external view returns(uint256);\r\n    function protocols() external view returns(address[] memory);\r\n    function getTokenDefaults(address _token) external view returns (InvestmentPart[] memory);\r\n    function getCurrentInvestment(address _token) external view returns(InvestmentAmountPartition memory);\r\n    function getExpectedAPR(address _token, uint256 _additionalAmount) external view returns(uint256);\r\n}"
		},
		"interfaces/IMuchoVault.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport \"./IMuchoToken.sol\";\r\nimport \"../lib/VaultInfo.sol\";\r\n\r\n/*\r\nCONTRATO MuchoVault:\r\n\r\nPunto de entrada para deposit/withdraw del inversor\r\nNo guarda liquidez. Potencialmente upgradeable\r\nGuarda una estructura por cada vault. \r\nEn caso de upgrade deberíamos crear estructura gemela en el nuevo contrato\r\nEs el owner de los MuchoToken, receipt tokens de cada vault, por tanto es quien puede mintearlos o quemarlos\r\nEs el owner de MuchoController, para hacer operaciones internas\r\nEn caso de upgrade tendría que transferir estos ownerships\r\nOwner: protocolOwner\r\n\r\nOperaciones públicas (inversor): deposit, withdraw\r\nOperaciones de configuración (owner o trader): añadir, abrir o cerrar vault\r\nOperaciones de upgrade (owner): cambiar direcciones de los contratos a los que se conecta\r\n*/\r\n\r\ninterface IMuchoVault{\r\n    event Deposited(address user, uint8 vaultId, uint256 amount, uint256 totalStakedAfter);\r\n    event Withdrawn(address user, uint8 vaultId, uint256 amount, uint256 mamount, uint256 totalStakedAfter);\r\n    \r\n    event VaultAdded(IERC20Metadata depositToken, IMuchoToken muchoToken);\r\n    event VaultOpen(uint8 vaultId);\r\n    event VaultClose(uint8 vaultId);\r\n    event VaultWithdrawOpen(uint8 vaultId);\r\n    event VaultWithdrawClose(uint8 vaultId);\r\n    event DepositFeeChanged(uint8 vaultId, uint16 fee);\r\n    event WithdrawFeeChanged(uint8 vaultId, uint16 fee);\r\n    event VaultUpdated(uint8 vaultId, uint256 amountBefore, uint256 amountAfter);\r\n    event MuchoHubChanged(address newContract);\r\n    event PriceFeedChanged(address newContract);\r\n    event BadgeManagerChanged(address newContract);\r\n    event MuchoRewardRouterChanged(address newContract);\r\n    event EarningsAddressChanged(address newAddr);\r\n    event AprUpdatePeriodChanged(uint256 secs);\r\n\r\n    function deposit(uint8 _vaultId, uint256 _amount) external;\r\n    function withdraw(uint8 _vaultId, uint256 _share) external;\r\n\r\n    function addVault(IERC20Metadata _depositToken, IMuchoToken _muchoToken) external returns(uint8);\r\n    function setOpenVault(uint8 _vaultId, bool open) external;\r\n    function setOpenAllVault(bool _open) external;\r\n    function setDepositFee(uint8 _vaultId, uint16 _fee) external;\r\n    function setWithdrawFee(uint8 _vaultId, uint16 _fee) external;\r\n\r\n    function refreshAndUpdateAllVaults() external;\r\n\r\n    function setMuchoHub(address _newContract) external;\r\n    function setPriceFeed(address _contract) external;\r\n    function setBadgeManager(address _contract) external;\r\n    function setEarningsAddress(address _addr) external;\r\n\r\n    function getVaultInfo(uint8 _vaultId) external view returns(VaultInfo memory);\r\n\r\n\r\n    function getDepositFee(uint8 _vaultId, uint256 _amount) external view returns(uint256);\r\n    function getWithdrawalFee(uint8 _vaultId, uint256 _amount) external view returns(uint256);\r\n    function vaultTotalUSD(uint8 _vaultId) external view returns (uint256);\r\n    function allVaultsTotalUSD() external view returns (uint256);\r\n    function investorVaultTotalStaked(uint8 _vaultId, address _user) external view returns (uint256);\r\n    function investorVaultTotalUSD(uint8 _vaultId, address _user) external view returns (uint256);\r\n    function investorTotalUSD(address _user) external view returns (uint256);\r\n    function muchoTokenToDepositTokenPrice(uint8 _vaultId) external view returns (uint256);\r\n    function getExpectedAPR(uint8 _vaultId, uint256 _additionalAmount) external view returns(uint256);\r\n}"
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
		},
		"lib/VaultInfo.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport \"../interfaces/IMuchoToken.sol\";\r\n\r\nstruct VaultInfo {\r\n        IERC20Metadata depositToken;    //token deposited in the vault\r\n        IMuchoToken muchoToken; //muchoToken receipt that will be returned to the investor\r\n\r\n        uint256 lastUpdate;         //Last time the totalStaked amount was updated\r\n\r\n        bool stakable;          //Inverstors can deposit\r\n        bool withdrawable;      //Investors can withdraw (for emergencies)\r\n\r\n        uint16 depositFee;\r\n        uint16 withdrawFee;\r\n\r\n        uint256 maxDepositUser; //Maximum amount a user without NFT can invest\r\n        uint256 maxCap; //Maximum total deposit (0 = no limit)\r\n}"
		},
		"interfaces/IMuchoToken.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\ninterface IMuchoToken is IERC20Metadata {\r\n    function mint(address recipient, uint256 _amount) external;\r\n    function burn(address _from, uint256 _amount) external ;\r\n}\r\n\r\n"
		},
		"lib/InvestmentPartition.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nstruct InvestmentPart{\r\n    address protocol;\r\n    uint16 percentage;\r\n}\r\n\r\nstruct InvestmentPartition{\r\n    InvestmentPart[] parts;\r\n    bool defined;\r\n}\r\n\r\n\r\n\r\nstruct InvestmentAmountPart{\r\n    address protocol;\r\n    uint256 amount;\r\n}\r\n\r\nstruct InvestmentAmountPartition{\r\n    InvestmentAmountPart[] parts;\r\n}"
		},
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
		}
	}
}